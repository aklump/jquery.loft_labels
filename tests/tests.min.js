function assertInstance(t,l){t.ok(l.defaultText),t.strictEqual("object",typeof l.el),t.strictEqual("object",typeof l.$el),t.strictEqual("object",typeof l.settings),t.strictEqual("function",typeof l.init),t.strictEqual("function",typeof l.value),t.strictEqual("function",typeof l.clear),t.strictEqual("function",typeof l.unclear),t.strictEqual("function",typeof l["default"])}QUnit.test("Test the is-default class is applied/removed.",function(t){var l=$("#loft-labels-a input");l.loftLabels(),t.ok(l.hasClass("loft-labels-is-default")),l.focus().val("not the default"),t.ok(!l.hasClass("loft-labels-is-default")),l.val("").blur(),t.ok(l.hasClass("loft-labels-is-default"))}),QUnit.test("Test instance.clear/unclear",function(t){var l=$("#loft-labels-a input"),a=[],e="Type to search...";l.loftLabels({},a);var s=a[0];s.clear(),t.strictEqual("",s.$el.val()),s.unclear(),t.strictEqual(e,s.$el.val()),s.$el.val("not default"),s.clear(),t.strictEqual("not default",s.$el.val()),s.unclear(),t.strictEqual("not default",s.$el.val()),s["default"](),t.strictEqual(e,s.$el.val())}),QUnit.test("Test using the instance returned.",function(t){var l=$("#loft-labels-a input"),a=[],e="Type to search...";l.loftLabels({},a),t.strictEqual(1,a.length);var s=a[0];assertInstance(t,s),t.strictEqual(e,s.$el.val()),t.strictEqual(e,$(s.el).val()),t.strictEqual(e,s.defaultText)}),QUnit.test("Test the onInit callback.",function(t){var l=$("#loft-labels-a input"),a=t.async();l.loftLabels({onInit:function(l){t.strictEqual("Type to search...",l.defaultText),assertInstance(t,l),a()}})}),QUnit.test("Test the default value callback.",function(t){var l=$("#loft-labels-a input"),a=t.async(),e=t.async();l.loftLabels({callback:function(l){return t.strictEqual("Type to search...",l),a(),"Breakfast time!"}}),setTimeout(function(){t.strictEqual("Breakfast time!",l.val()),e()},10)}),QUnit.test("Check custom classes on focus, blur and hover.",function(t){var l=$("#loft-labels-a input");l.loftLabels({focus:"highlight",hover:"over"}),l.focus(),t.strictEqual("",l.val()),t.strictEqual(!0,l.hasClass("highlight")),l.blur(),t.strictEqual(!1,l.hasClass("highlight")),l.trigger("mouseenter"),t.strictEqual(!0,l.hasClass("over")),l.trigger("mouseleave"),t.strictEqual(!1,l.hasClass("over"))}),QUnit.test("Check default classes on focus, blur and hover.",function(t){var l=$("#loft-labels-a input");l.loftLabels(),l.focus(),t.strictEqual("",l.val()),t.strictEqual(!0,l.hasClass("loft-labels-is-focus")),l.blur(),t.strictEqual(!1,l.hasClass("loft-labels-is-focus")),l.trigger("mouseenter"),t.strictEqual(!0,l.hasClass("loft-labels-is-hover")),l.trigger("mouseleave"),t.strictEqual(!1,l.hasClass("loft-labels-is-hover"))}),QUnit.test("Using custom css prefix handles label correctly.",function(t){var l=$("#loft-labels-a input");l.loftLabels({cssPrefix:"do-re-mi-"}),t.ok($("#loft-labels-a>label").is(":hidden")),t.strictEqual("Type to search...",l.val()),t.ok(l.hasClass("do-re-mi--processed"))}),QUnit.test("Simple usage (no args) handles label correctly.",function(t){var l=$("#loft-labels-a input");l.loftLabels(),t.ok($("#loft-labels-a>label").is(":hidden")),t.strictEqual("Type to search...",l.val()),t.ok(l.hasClass("loft-labels-processed"))}),QUnit.testStart(function(t){var l=$('<form id="loft-labels-a"><label for="search">Type to search...</label><input type="text" id="search" name="search" value=""/></form>');$("#testing-markup").html(l)}),QUnit.done(function(){$("#testing-markup").html("")});